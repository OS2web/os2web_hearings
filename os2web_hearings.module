<?php

/**
 * @file
 * OS2Web Hearings module file.
 */

use Drupal\comment\Entity\Comment;
use Drupal\Component\Utility\Mail as MailHelper;
use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

define('OS2WEB_HEARINGS_STATUS_ACTIVE_NAME', 'I gang');
define('OS2WEB_HEARINGS_STATUS_CLOSED_NAME', 'Afsluttet');

define('OS2WEB_HEARINGS_TYPE_HEARINGS', 'Høringer');
define('OS2WEB_HEARINGS_TYPE_DECISIONS', 'Afgørelser');

/**
 * Implements hook_preprocess_paragraph().
 *
 * Adding meeting search form into paragraph.
 */
function os2web_hearings_preprocess_paragraph__os2web_hearings_search(&$variables) {
  $variables['content'] = views_embed_view('os2web_hearings', 'os2web_hearings_embed_search_simple');
}

/**
 * Implements hook_cron().
 */
function os2web_hearings_cron() {
  // Close hearing if end_date is reached.
  $tids = \Drupal::entityQuery('taxonomy_term')
    ->condition('vid', 'os2web_hearings_status')
    ->condition('name', OS2WEB_HEARINGS_STATUS_ACTIVE_NAME)
    ->execute();
  if (empty($tids)) {
    \Drupal::logger('os2web_horing')
      ->error('Term for active hearings status not found');
    return;
  }
  $active_tid = reset($tids);

  // Fetching nodes with active status.
  $ids = \Drupal::entityQuery('node')
    ->condition('type', 'os2web_hearings_hearing_case')
    ->condition('field_os2web_hearings_end_date', date(DateTimeItemInterface::DATE_STORAGE_FORMAT, strtotime('now')), '<')
    ->condition('field_os2web_hearings_status', $active_tid)
    ->execute();

  // Fetching nodes with empty status.
  $ids_empty = \Drupal::entityQuery('node')
    ->condition('type', 'os2web_hearings_hearing_case')
    ->condition('field_os2web_hearings_end_date', date(DateTimeItemInterface::DATE_STORAGE_FORMAT, strtotime('now')), '<')
    ->notExists('field_os2web_hearings_status')
    ->execute();
  $ids = array_unique(array_merge($ids, $ids_empty));

  if (empty($ids)) {
    return;
  }

  $tids = \Drupal::entityQuery('taxonomy_term')
    ->condition('vid', 'os2web_hearings_status')
    ->condition('name', OS2WEB_HEARINGS_STATUS_CLOSED_NAME)
    ->execute();
  if (empty($tids)) {
    \Drupal::logger('os2web_horing')
      ->error('Term for closed hearings status not found');
    return;
  }
  $closed_tid = reset($tids);

  /** @var \Drupal\node\NodeInterface $node */
  foreach (Node::loadMultiple($ids) as $node) {
    $node->set('field_os2web_hearings_status', $closed_tid);
    $node->save();
    _os2web_hearings_send_email_notification($node);
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function os2web_hearings_node_presave(EntityInterface $entity) {
  if ($entity->bundle() != 'os2web_hearings_hearing_case') {
    return;
  }

  // Activate hearing when end date is changed.
  $end_date_value = $entity->field_os2web_hearings_end_date->value;
  if (is_array($end_date_value)) {
    $end_date_value = reset($end_date_value);
  }

  if (empty($end_date_value) ||
    date(DateTimeItemInterface::DATE_STORAGE_FORMAT, strtotime($end_date_value)) < date(DateTimeItemInterface::DATE_STORAGE_FORMAT, strtotime('now'))) {
    return;
  }

  $tids = \Drupal::entityQuery('taxonomy_term')
    ->condition('vid', 'os2web_hearings_status')
    ->condition('name', OS2WEB_HEARINGS_STATUS_ACTIVE_NAME)
    ->execute();
  if (empty($tids)) {
    \Drupal::logger('os2web_horing')
      ->error('Can not set correct active status on new hearing');
    return;
  }
  $active_tid = reset($tids);
  $entity->set('field_os2web_hearings_status', $active_tid);

  if ($entity->status->value && empty($entity->field_os2web_hearings_published->value)) {
    $entity->set('field_os2web_hearings_published', date(DateTimeItemInterface::DATE_STORAGE_FORMAT, strtotime('now')));
  }
}

/**
 * Implements hook_theme().
 */
function os2web_hearings_theme() {
  return [
    'hearings_og_afgeorelse_case__mail' => [
      'variables' => [
        'node' => NULL,
        'comments' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_mail().
 *
 * Captures the outgoing mail and sets appropriate message body and headers.
 */
function os2web_hearings_mail($key, &$message, $params) {
  if (isset($params['headers'])) {
    $message['headers'] = array_merge($message['headers'], $params['headers']);
  }

  $message['from'] = $params['from'];
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function os2web_hearings_form_taxonomy_term_os2web_hearings_status_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Status terms names are using as key for changing status.
  // It shouldn't be possible to change name on term that is used for statuses.
  /** @var \Drupal\taxonomy\Entity\Term $term */
  $term = $form_state->getFormObject()->getEntity();
  if (in_array($term->label(), [OS2WEB_HEARINGS_STATUS_CLOSED_NAME, OS2WEB_HEARINGS_STATUS_ACTIVE_NAME])) {
    $form['name']['widget'][0]['#disabled'] = TRUE;
    $form['name']['widget']['description'] = ['#markup' => t('This taxonomy term is used for hearing status field and can not be renamed')];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function os2web_hearings_form_taxonomy_term_os2web_hearings_status_delete_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Status terms names are using as key for changing status.
  // It shouldn't be possible to delete term that is used for statuses.
  /** @var \Drupal\taxonomy\Entity\Term $term */
  $term = $form_state->getFormObject()->getEntity();
  if (in_array($term->label(), [OS2WEB_HEARINGS_STATUS_CLOSED_NAME, OS2WEB_HEARINGS_STATUS_ACTIVE_NAME])) {
    $form['description'] = [
      '#markup' => t('This taxonomy term is used for hearing status field and can not be deleted'),
    ];
    $form['#disabled'] = TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Changes the fields position.
 */
function os2web_hearings_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-os2web-hearings-os2web-hearings-embed-search-simple') {
    // Making sure status filter is in the bottom.
    $status_filter = $form['field_os2web_hearings_status_target_id'];
    unset($form['field_os2web_hearings_status_target_id']);
    $form['field_os2web_hearings_status_target_id'] = $status_filter;

    // Setting default hearings type to Hearings, if it's empty.
    $request = \Drupal::request();
    if (is_null($request->get('field_os2web_hearings_type_target_id'))) {
      $hearingsKey = array_search(OS2WEB_HEARINGS_TYPE_HEARINGS, $form['field_os2web_hearings_type_target_id']['#options']);
      $form['field_os2web_hearings_type_target_id']['#value'] = $hearingsKey;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function os2web_hearings_form_comment_os2web_hearings_hearing_reply_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['comment_body']['widget']['#after_build'][] = '_os2web_hearings_remove_textarea_help';
}

/**
 * Hides the field format help text.
 *
 * @param array $form_element
 *   Form element to hide the help text from.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 *
 * @return mixed
 *   Form element without help text from.
 */
function _os2web_hearings_remove_textarea_help(array $form_element, FormStateInterface $form_state) {
  if (isset($form_element[0]['format'])) {
    // All this stuff is needed to hide the help text.
    unset($form_element[0]['format']['guidelines']);
    unset($form_element[0]['format']['help']);
    unset($form_element[0]['format']['#type']);
    unset($form_element[0]['format']['#theme_wrappers']);
    $form_element[0]['format']['format']['#access'] = FALSE;
  }

  return $form_element;
}

function _os2web_hearings_send_email_notification($node) {
  $type = t('Høringe elle Afgørelse');
  if (!empty($node->field_os2web_hearings_type) && $node->field_os2web_hearings_type instanceof EntityReferenceFieldItemListInterface) {
    $type_value = $node->field_os2web_hearings_type->referencedEntities();
    $type = $type_value[0]->label();
  }

  $site_config = \Drupal::service('config.factory')->get('system.site');
  $renderer = \Drupal::service('renderer');
  $params = [
    'headers' => [
      'Content-Type' => 'text/html; charset=UTF-8;',
      'Content-Transfer-Encoding' => '8Bit',
    ],
    'from' => MailHelper::formatDisplayName($site_config->get('name')) . ' <' . $site_config->get('mail') . '>',
    'subject' => t('@type #@nid', [
      '@nid' => $node->id(),
      '@type' => $type,
    ]),
  ];

  $comments_field_value = $node->field_os2web_hearings_reply;
  $comments = [];
  if (!empty($comments_field_value)) {
    foreach ($comments_field_value as $comment_value) {
      $comments[] = Comment::load($comment_value->cid);
    }
  }
  $build = [
    '#theme' => 'hearings_og_afgeorelse_case__mail',
    '#node' => $node,
    '#comments' => $comments,
  ];
  $params['body'] = $renderer->renderRoot($build);

  if (!empty($node->field_os2web_hearings_attac_doc)) {
    foreach ($node->field_os2web_hearings_attac_doc->referencedEntities() as $file) {
      if (!file_exists($file->getFileUri())) {
        continue;
      }
      $file = (object) [
        'filename' => $file->getFilename(),
        'uri' => $file->getFileUri(),
        'filemime' => $file->getMimeType(),
      ];
      $params['files'][] = $file;
    }
  }
  $langcode = \Drupal::languageManager()->getDefaultLanguage()->getId();
  if ($node->field_os2web_hearings_not_email->isEmpty()) {
    \Drupal::logger('os2web_hearings')->warning(t('Notification email is empty. Can not send email notification for os2web_hearings_hearing_case with id @nid.', ['@nid' => $node->id()]));
    return;
  }
  $mailto = $node->field_os2web_hearings_not_email->first()->value;
  $mail_manager = \Drupal::service('plugin.manager.mail');
  if (!$mail_manager->mail('os2web_hearings', 'default', $mailto, $langcode, $params)) {
    \Drupal::logger('os2web_hearings')->error(t('Sending of email notification for os2web_hearings_hearing_case with id @nid failed.', ['@nid' => $node->id()]));
  }
}

/**
 * Implements hook_preprocess_node().
 */
function os2web_hearings_preprocess_node(&$variables) {
  if ($variables['node']->getType() == 'os2web_hearings_hearing_case') {
    $hearing = $variables['node'];

    /** @var \Drupal\Core\Datetime\DrupalDateTime $endDate */
    $endDate = $hearing->field_os2web_hearings_end_date->date;

    if ($endDate->getTimestamp() < time()) {
      $variables['content']['#closed'] = TRUE;
    }
    else {
      $variables['content']['#closed'] = FALSE;
    }
  }
}
